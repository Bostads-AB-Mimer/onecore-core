/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    openapi: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check system health status
         * @description Retrieves the health status of the system and its subsystems.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response with system health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Name of the system.
                             * @example work-order
                             */
                            name?: string;
                            /**
                             * @description Overall status of the system ('active', 'impaired', 'failure', 'unknown').
                             * @example active
                             */
                            status?: string;
                            subsystems?: {
                                /** @description Name of the subsystem. */
                                name?: string;
                                /**
                                 * @description Status of the subsystem.
                                 * @enum {string}
                                 */
                                status?: "active" | "impaired" | "failure" | "unknown";
                                /** @description Additional details about the subsystem status. */
                                details?: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    security: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workOrders/contactCode/{contactCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get work orders by contact code
         * @description Retrieves work orders based on the provided contact code.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The contact code to filter work orders. */
                    contactCode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved work orders. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            content?: {
                                workOrders?: components["schemas"]["WorkOrder"][];
                            };
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error. Failed to retrieve work orders. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workOrders/residenceId/{residenceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get work orders by residence id
         * @description Retrieves work orders based on the provided residence id.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The residence id to filter work orders. */
                    residenceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved work orders. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            content?: {
                                workOrders?: components["schemas"]["WorkOrder"][];
                            };
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error. Failed to retrieve work orders. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new work order
         * @description Creates a new work order based on the provided request body.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateWorkOrderBody"];
                };
            };
            responses: {
                /** @description Work order created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            content?: {
                                /** @example 123 */
                                newWorkOrderId?: number;
                            };
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Bad request. Failed to create work order. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Error message from the adapter */
                            error?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error. Failed to create work order. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workOrders/{workOrderId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a message to a work order
         * @description Adds a message to a work order based on the provided work order ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the work order to which the message will be added. */
                    workOrderId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The message to be added to the work order.
                         * @example This is a new message for the work order.
                         */
                        message?: string;
                    };
                };
            };
            responses: {
                /** @description Message added to the work order successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            content?: {
                                /** @example Message added to work order with ID {workOrderId} */
                                message?: string;
                            };
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Bad request. Message is missing from the request body. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Message is missing from the request body */
                            reason?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error. Failed to add message to the work order. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            error?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workOrders/{workOrderId}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Close a work order
         * @description Closes a work order based on the provided work order ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the work order to be closed. */
                    workOrderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Work order closed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            content?: {
                                /** @example Work order with ID {workOrderId} updated successfully */
                                message?: string;
                            };
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
                /** @description Internal server error. Failed to close work order. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Failed to update work order with ID {workOrderId} */
                            message?: string;
                            /** @description Route metadata */
                            metadata?: Record<string, never>;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        WorkOrder: {
            AccessCaption: string;
            Caption: string;
            Code: string;
            ContactCode: string;
            Description: string;
            DetailsCaption: string;
            ExternalResource: boolean;
            Id: string;
            /** Format: date-time */
            LastChanged: string;
            Priority: string;
            /** Format: date-time */
            Registered: string;
            RentalObjectCode: string;
            Status: string;
            UseMasterKey: boolean;
            HiddenFromMyPages?: boolean;
            WorkOrderRows: {
                Description: string | null;
                LocationCode: string | null;
                EquipmentCode: string | null;
            }[];
            Messages?: {
                id: number;
                body: string;
                messageType: string;
                author: string;
                /** Format: date-time */
                createDate: string;
            }[];
            Url?: string;
        };
        CreateWorkOrderBody: {
            rentalProperty: {
                id: string;
                type: string;
                property: {
                    address: string;
                    code: string;
                    entrance: string;
                    floor: string;
                    hasElevator: boolean;
                    washSpace: string | null;
                    area: number;
                    estateCode: string;
                    estate: string;
                    buildingCode: string;
                    building: string;
                };
                maintenanceUnits?: {
                    id: string;
                    rentalPropertyId: string;
                    code: string;
                    caption: string;
                    type: string;
                    estateCode: string;
                    estate: string;
                }[];
            };
            tenant: {
                contactCode: string;
                contactKey: string;
                firstName?: string;
                lastName?: string;
                nationalRegistrationNumber?: string;
                phoneNumbers?: {
                    phoneNumber: string;
                    type: string;
                    isMainNumber: number;
                }[];
                emailAddress?: string;
            };
            lease: {
                leaseId: string;
                leaseNumber: string;
                type: string;
                leaseStartDate: string;
                leaseEndDate?: (unknown | string) | null;
                contractDate?: string;
                approvalDate?: string;
            };
            details: {
                ContactCode: string;
                RentalObjectCode: string;
                AccessOptions: {
                    Type: number;
                    PhoneNumber: string | null;
                    Email: string;
                    CallBetween: string;
                };
                HearingImpaired: boolean;
                Pet: string;
                Rows: {
                    LocationCode: string;
                    PartOfBuildingCode: string;
                    Description: string;
                    MaintenanceUnitCode?: (unknown | string) | null;
                    MaintenanceUnitCaption?: (unknown | string) | null;
                }[];
                Images: {
                    Filename: string;
                    ImageType: number;
                    Base64String: string;
                }[];
            };
        };
        Lease: {
            leaseId: string;
            leaseNumber: string;
            type: string;
            leaseStartDate: string;
            leaseEndDate?: (unknown | string) | null;
            contractDate?: string;
            approvalDate?: string;
        };
        RentalProperty: {
            id: string;
            type: string;
            property: {
                address: string;
                code: string;
                entrance: string;
                floor: string;
                hasElevator: boolean;
                washSpace: string | null;
                area: number;
                estateCode: string;
                estate: string;
                buildingCode: string;
                building: string;
            };
            maintenanceUnits?: {
                id: string;
                rentalPropertyId: string;
                code: string;
                caption: string;
                type: string;
                estateCode: string;
                estate: string;
            }[];
        };
        Tenant: {
            contactCode: string;
            contactKey: string;
            firstName?: string;
            lastName?: string;
            nationalRegistrationNumber?: string;
            phoneNumbers?: {
                phoneNumber: string;
                type: string;
                isMainNumber: number;
            }[];
            emailAddress?: string;
        };
        CreateWorkOrderDetails: {
            ContactCode: string;
            RentalObjectCode: string;
            AccessOptions: {
                Type: number;
                PhoneNumber: string | null;
                Email: string;
                CallBetween: string;
            };
            HearingImpaired: boolean;
            Pet: string;
            Rows: {
                LocationCode: string;
                PartOfBuildingCode: string;
                Description: string;
                MaintenanceUnitCode?: (unknown | string) | null;
                MaintenanceUnitCaption?: (unknown | string) | null;
            }[];
            Images: {
                Filename: string;
                ImageType: number;
                Base64String: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
